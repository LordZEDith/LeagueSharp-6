What is a ...
*	Skill: a class containing the logic for a specific spell. For example your Q
*	ComboProvider: The class managing the skills, also able to generate menus, passes Interrupter and gapcloser events to the skills, ...
*	IMainContext: Implement this interface in your main class. The ComboProvider wi

Skill:
*	Each skill has it's own logic. Create a class for each skill and derive it from Commons.ComboSystem.Skill
*	You may want to set OnlyUpdateIfTargetValid, OnlyUpdateIfCastable in the constructor
*	Implement the abstract stuffs. In GetPriority return the skill priority. Skills with a higher priority are getting called first.
	You could also add logic to dynamically return a different priority in a different sitation
*	In the Cast method add logic to attack the given target. Use the SafeCast() method instead of Spell.Cast() (see "Why use SafeCast?")



## Why use SafeCast() ? ## 
Look at the following code (it's only getting executed once!):
_E.Cast(target);
_Q.Cast(target);

There are champions where both skills are getting cast (Ekko), and some where only the first one is getting cast (Brand).
This doesn't really matter if the code getts called every tick, as Q will eventually also get used, but what if you have this code in your Gapcloser logic?
(The gapcloser event gets called multiple times, but only as long as the gapcloser is in the gapcloser spell)
If this code was in the gapcloser logic and e has a high cast time and the enemy a short gapcloser, q would never execute!

Another example:
Let's say in a special situation you want to Q-R the enemy if booth skills are up. Let's say the code is something like:
if(SpecialSituation && Q.GetState() == SpellState.Ready && R.GetState() == SpellState.Ready)
{
	Q.Cast(target);
	R.Cast(target);
}

If you'd play a champ where only the first skill would get executed (if the code would run once) you'd have a problem:
Q is getting casted, but not the R as long as Q is casting. But as soon as Q finished casting the SpellState will change to Cooldown
which means the if-condition is no longer met. In other words: it could happen that R will NEVER execute.

What does SafeCast?
if you SafeCast a spell it will try to cast until it was successfull OR the time exceeds the SafeCastMaxTime 

