using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using LeagueSharp;
using LeagueSharp.Common;
using SharpDX;
using Color = System.Drawing.Color;

namespace TheGaren
{
    class Garen
    {
        private Menu _comboMenu, _laneClearMenu, _harassMenu, _miscMenu, _orbwalkerMenu;
        private Orbwalking.Orbwalker _orbwalker;
        private Spell _q, _w, _e, _r;
        private float _issueTime;
        private bool _disabledOrbwalk;
        private Vector3 _stickyTargetLastPosition;

        private readonly int[] _ultDamage = { 180, 345, 520 };
        private readonly float[] _ultDamagePerHp = { 3.5f, 3f, 2.5f };

        public void Load()
        {


            Game.PrintChat("The Garen loaded!");

            var menu = CreateMenu("The Garen", true);
            _orbwalkerMenu = CreateMenu("Orbwalker");
            var targetSelectorMenu = CreateMenu("Target Selector");
            _comboMenu = CreateMenu("Combo");
            _laneClearMenu = CreateMenu("Laneclear");
            _harassMenu = CreateMenu("Harass");
            _miscMenu = CreateMenu("Misc");

            _orbwalker = new Orbwalking.Orbwalker(_orbwalkerMenu);
            TargetSelector.AddToMenu(targetSelectorMenu);

            _comboMenu.AddMItem("Use Q", true);
            _comboMenu.AddMItem("Use W", true);
            _comboMenu.AddMItem("Use E", true);
            _comboMenu.AddMItem("Use R", true);

            _laneClearMenu.AddMItem("Use Q", true);
            _laneClearMenu.AddMItem("Use E", true);
            _laneClearMenu.AddMItem("Poke over clear", true);

            _harassMenu.AddMItem("Use Q", true);
            _harassMenu.AddMItem("Use W", false);
            _harassMenu.AddMItem("Use E", true);

            _miscMenu.AddMItem("Sticky E", true);

            menu.AddSubMenu(_orbwalkerMenu);
            menu.AddSubMenu(targetSelectorMenu);
            menu.AddSubMenu(_comboMenu);
            menu.AddSubMenu(_laneClearMenu);
            menu.AddSubMenu(_harassMenu);
            menu.AddSubMenu(_miscMenu);
            menu.AddToMainMenu();

            _q = new Spell(SpellSlot.Q);
            _w = new Spell(SpellSlot.W);
            _e = new Spell(SpellSlot.E);
            _r = new Spell(SpellSlot.R);

            Game.OnUpdate += Tick;
            Drawing.OnDraw += Drawing_OnDraw;
        }

        void Drawing_OnDraw(EventArgs args)
        {
            Render.Circle.DrawCircle(ObjectManager.Player.Position, 375, Color.Red);
       //     Render.Circle.DrawCircle(ObjectManager.Player.ServerPosition, 375, Color.Orange);
       //     Render.Circle.DrawCircle(ObjectManager.Player.Position, 225 + ObjectManager.Player.BoundingRadius, Color.Green);
        }

        private Menu CreateMenu(string name, bool root = false)
        {
            return new Menu(name, name, root);
        }

        private void Tick(EventArgs args)
        {
            if (Game.Time - _issueTime > 0.25f)
            {
                _issueTime = Game.Time;
                if (ObjectManager.Player.Buffs.Any(buff => buff.Name == "GarenE"))
                {
                    if (_miscMenu.Item("Misc.StickyE").GetValue<bool>())
                    {
                        var tar = TargetSelector.GetTarget(800, TargetSelector.DamageType.Magical);
                        ObjectManager.Player.IssueOrder(GameObjectOrder.MoveTo, tar.Position + (tar.Position - _stickyTargetLastPosition).Normalized() * 200);
                        _stickyTargetLastPosition = tar.Position;
                    }

                    else
                    {
                        var pos = Game.CursorPos;
                        ObjectManager.Player.IssueOrder(GameObjectOrder.MoveTo, pos);
                    }

                }
                else if (_disabledOrbwalk)
                {
                    _disabledOrbwalk = false;
                    _orbwalker.SetAttack(true);
                    _orbwalker.SetMovement(true);
                    Game.PrintChat("Redo");
                }
            }

            switch (_orbwalker.ActiveMode)
            {
                case Orbwalking.OrbwalkingMode.None:
                    break;
                case Orbwalking.OrbwalkingMode.Combo:
                    ComboRoutine();
                    break;
                case Orbwalking.OrbwalkingMode.LaneClear:
                    LaneClearRoutine();
                    break;
                case Orbwalking.OrbwalkingMode.Mixed:
                    HarassRoutine();
                    break;
            }



            // stufe 1 ~ + 6 - 8  
            // Stufe 2 ~ - 6 - 8 253 247

            Drawing.DrawText(200, 200, Color.Red, ObjectManager.Player.GetSpellDamage(HeroManager.Enemies.First(), SpellSlot.R).ToString());


            var level = ObjectManager.Player.GetSpell(SpellSlot.R).Level;
            if (level == 0)
                return;
            var target = HeroManager.Enemies.First();

            var damage = _ultDamage[level - 1] + (target.MaxHealth - target.Health) / _ultDamagePerHp[level - 1];

            var damage2 = ObjectManager.Player.CalcDamage(target, Damage.DamageType.Magical, damage) - 5;
            Drawing.DrawText(200, 220, Color.Red, damage2.ToString());




        }

        private void ComboRoutine()
        {
             var target = TargetSelector.GetTarget(400, TargetSelector.DamageType.Magical);
            if (_comboMenu.Item("Combo.UseW").GetValue<bool>() && ObjectManager.Player.GetSpell(SpellSlot.W).State == SpellState.Ready)
            {
                _w.Cast();
            }

            if (_comboMenu.Item("Combo.UseQ").GetValue<bool>() && ObjectManager.Player.GetSpell(SpellSlot.Q).State == SpellState.Ready)
            {
                _q.Cast();
            }
            else
            {

                if ((!ObjectManager.Player.Buffs.Any(buff => buff.Name == "GarenQ" || buff.Name == "GarenE")) && (ObjectManager.Player.GetSpell(SpellSlot.Q).CooldownExpires - Game.Time) + 0.5f < ObjectManager.Player.GetSpell(SpellSlot.Q).Cooldown && HeroManager.Enemies.Any(enemy => enemy.Distance(ObjectManager.Player) < 225 + ObjectManager.Player.BoundingRadius + enemy.BoundingRadius))
                {
                    if (_comboMenu.Item("Combo.UseE").GetValue<bool>() && ObjectManager.Player.GetSpell(SpellSlot.E).State == SpellState.Ready)
                    {
                        _e.Cast();

                        //    _orbwalkerMenu.Item("Orbwalk").SetValue<KeyBind>(new KeyBind(100, KeyBindType.Press));
                        _orbwalker.SetAttack(false);
                        _orbwalker.SetMovement(false);
                        _disabledOrbwalk = true;
                        _stickyTargetLastPosition = target.Position;
                        // _orbwalker.SetMovement(false);
                    }
                }
                else
                {
                    if (_comboMenu.Item("Combo.UseR").GetValue<bool>() && ObjectManager.Player.GetSpell(SpellSlot.R).State == SpellState.Ready)
                    {
                       

                        var level = ObjectManager.Player.GetSpell(SpellSlot.R).Level;


                        var damage = _ultDamage[level] + (target.MaxHealth - target.Health) * _ultDamagePerHp[level];



                        if (target != null && ObjectManager.Player.GetSpellDamage(target, SpellSlot.R) > target.Health)
                        {
                            Game.PrintChat("dmg: " + ObjectManager.Player.GetSpellDamage(target, SpellSlot.R));
                            _r.Cast(target);
                        }
                    }
                }
            }


            // ReSharper disable once SimplifyLinqExpression


        }

        private void LaneClearRoutine()
        {
            if (TargetSelector.GetTarget(225 + ObjectManager.Player.BoundingRadius, TargetSelector.DamageType.Physical) != null)
            {
                HarassRoutine();
                return;
            }


        }


        private bool done = false;
        private void HarassRoutine()
        {
            if (done)
                return;
            _w.Cast();
            _q.Cast();
            _e.Cast();
            
            Console.WriteLine("CASTED");
            done = true;
        }
    }
}
